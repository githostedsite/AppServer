namespace ASC.People.Mapping.TypeConverters;

public class EmployeeTypeConverter : ITypeConverter<UserInfo, EmployeeDto>, ITypeConverter<UserInfo, EmployeeFullDto>
{
    private readonly UserPhotoManager _userPhotoManager;
    private readonly ApiDateTimeHelper _apiDateTimeHelper;
    private readonly DisplayUserSettingsHelper _displayUserSettingsHelper;
    private readonly CommonLinkUtility _commonLinkUtility;
    private readonly UserManager _userManager;
    private readonly ApiContext _apiContext;
    private readonly WebItemSecurity _webItemSecurity;

    public EmployeeTypeConverter(
        UserPhotoManager userPhotoManager,
        ApiDateTimeHelper apiDateTimeHelper,
        ApiContext apiContext,
        DisplayUserSettingsHelper displayUserSettingsHelper,
        CommonLinkUtility commonLinkUtility,
        UserManager userManager,
        WebItemSecurity webItemSecurity)
    {
        _userPhotoManager = userPhotoManager;
        _apiDateTimeHelper = apiDateTimeHelper;
        _apiContext = apiContext;
        _webItemSecurity = webItemSecurity;
        _displayUserSettingsHelper = displayUserSettingsHelper;
        _commonLinkUtility = commonLinkUtility;
        _userManager = userManager;
    }

    public EmployeeFullDto Convert(UserInfo source, EmployeeFullDto destination, ResolutionContext context)
    {
        var result = InternalConvert(source, new EmployeeFullDto());

        result.UserName = source.UserName;
        result.FirstName = source.FirstName;
        result.LastName = source.LastName;
        result.Birthday = _apiDateTimeHelper.Get(source.BirthDate);
        result.Status = source.Status;
        result.ActivationStatus = source.ActivationStatus & ~EmployeeActivationStatus.AutoGenerated;
        result.Terminated = _apiDateTimeHelper.Get(source.TerminatedDate);
        result.WorkFrom = _apiDateTimeHelper.Get(source.WorkFromDate);
        result.Email = source.Email;
        result.IsVisitor = source.IsVisitor(_userManager);
        result.IsAdmin = source.IsAdmin(_userManager);
        result.IsOwner = source.IsOwner(_apiContext.Tenant);
        result.IsLDAP = source.IsLDAP();
        result.IsSSO = source.IsSSO();

        if (source.Sex.HasValue)
        {
            result.Sex = source.Sex.Value ? "male" : "female";
        }

        if (!string.IsNullOrEmpty(source.Location))
        {
            result.Location = source.Location;
        }
        if (!string.IsNullOrEmpty(source.Notes))
        {
            result.Notes = source.Notes;
        }

        if (!string.IsNullOrEmpty(source.MobilePhone))
        {
            result.MobilePhone = source.MobilePhone;
        }

        result.MobilePhoneActivationStatus = source.MobilePhoneActivationStatus;

        if (!string.IsNullOrEmpty(source.CultureName))
        {
            result.CultureName = source.CultureName;
        }

        FillConacts(result, source);

        if (_apiContext.Check("groups") || _apiContext.Check("department"))
        {
            var groups = context.Mapper.Map<List<GroupInfo>, List<GroupSummaryDto>>(
                _userManager.GetUserGroups(source.ID));

            if (groups.Count > 0)
            {
                result.Groups = groups;
                result.Department = string.Join(", ", result.Groups.Select(d => d.Name.HtmlEncode()));
            }
            else
            {
                result.Department = "";
            }
        }

        var userInfoLM = source.LastModified.GetHashCode();

        if (_apiContext.Check("avatarMax"))
        {
            result.AvatarMax = _userPhotoManager.GetMaxPhotoURL(source.ID, out var isdef) + (isdef ? "" : $"?_={userInfoLM}");
        }

        if (_apiContext.Check("avatarMedium"))
        {
            result.AvatarMedium = _userPhotoManager.GetMediumPhotoURL(source.ID, out var isdef) + (isdef ? "" : $"?_={userInfoLM}");
        }

        if (_apiContext.Check("avatar"))
        {
            result.Avatar =_userPhotoManager.GetBigPhotoURL(source.ID, out var isdef) + (isdef ? "" : $"?_={userInfoLM}");
        }

        if (_apiContext.Check("listAdminModules"))
{
            var listAdminModules = source.GetListAdminModules(_webItemSecurity);
            if (listAdminModules.Count > 0)
            {
                result.ListAdminModules = listAdminModules;
            }
        }

        return result;
    }

    public EmployeeDto Convert(UserInfo source, EmployeeDto destination, ResolutionContext context)
    {
        var result = InternalConvert(source, new EmployeeFullDto());

        return result;
    }

    private EmployeeFullDto InternalConvert(UserInfo source, EmployeeFullDto destination)
    {
        destination.Id = source.ID;
        destination.DisplayName = _displayUserSettingsHelper.GetFullUserName(source);

        if (!string.IsNullOrEmpty(source.Title))
        {
            destination.Title = source.Title;
        }

        var userInfoLM = source.LastModified.GetHashCode();

        if (_apiContext.Check("avatarSmall"))
        {
            destination.AvatarSmall = _userPhotoManager.GetSmallPhotoURL(source.ID, out var isdef)
                + (isdef ? "" : $"?_={userInfoLM}");
        }

        if (destination.Id != Guid.Empty)
        {
            var profileUrl = _commonLinkUtility.GetUserProfile(source, false);
            destination.ProfileUrl = _commonLinkUtility.GetFullAbsolutePath(profileUrl);
        }

        return destination;
    }

    private void FillConacts(EmployeeFullDto employeeWraperFull, UserInfo userInfo)
    {
        if (userInfo.ContactsList == null)
        {
            return;
        }

        var contacts = new List<Contact>();

        for (var i = 0; i < userInfo.ContactsList.Count; i += 2)
        {
            if (i + 1 < userInfo.ContactsList.Count)
            {
                contacts.Add(new Contact(userInfo.ContactsList[i], userInfo.ContactsList[i + 1]));
            }
        }

        if (contacts.Count > 0)
        {
            employeeWraperFull.Contacts = contacts;
        }
    }
}
