// <auto-generated />
using System;
using ASC.Core.Common.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ASC.Core.Common.Migrations.Npgsql.TenantDbContextNpgsql
{
    [DbContext(typeof(PostgreSqlTenantDbContext))]
    [Migration("20200929104647_TenantDbContextNpgsql")]
    partial class TenantDbContextNpgsql
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbCoreSettings", b =>
                {
                    b.Property<int>("Tenant")
                        .HasColumnName("tenant")
                        .HasColumnType("integer");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("bytea");

                    b.HasKey("Tenant", "Id")
                        .HasName("core_settings_pkey");

                    b.ToTable("core_settings","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("Calls")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("calls")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnName("creationdatetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Industry")
                        .HasColumnName("industry")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("language")
                        .HasColumnType("character(10)")
                        .HasDefaultValueSql("'en-US'")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MappedDomain")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("mappeddomain")
                        .HasColumnType("character varying(100)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("owner_id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(38);

                    b.Property<string>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_id")
                        .HasColumnType("character varying(38)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(38);

                    b.Property<bool>("Spam")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("spam")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StatusChanged")
                        .HasColumnName("statuschanged")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timezone")
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(50);

                    b.Property<string>("TrustedDomains")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("trusteddomains")
                        .HasColumnType("character varying(1024)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(1024);

                    b.Property<int>("TrustedDomainsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("trusteddomainsenabled")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("version")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("2");

                    b.Property<DateTime>("VersionChanged")
                        .HasColumnName("version_changed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Version_Changed")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasName("alias");

                    b.HasIndex("LastModified")
                        .HasName("last_modified_tenants_tenants");

                    b.HasIndex("MappedDomain")
                        .HasName("mappeddomain");

                    b.HasIndex("Version")
                        .HasName("version");

                    b.ToTable("tenants_tenants","onlyoffice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "localhost",
                            Calls = false,
                            CreationDateTime = new DateTime(2020, 9, 29, 10, 46, 46, 424, DateTimeKind.Utc).AddTicks(6218),
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Web Office",
                            OwnerId = new Guid("66faa6e4-f133-11ea-b126-00ffeec8b4ef"),
                            Public = false,
                            Spam = false,
                            Status = 0,
                            TrustedDomainsEnabled = 0,
                            Version = 0,
                            VersionChanged = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantForbiden", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Address")
                        .HasName("tenants_forbiden_pkey");

                    b.ToTable("tenants_forbiden","onlyoffice");

                    b.HasData(
                        new
                        {
                            Address = "controlpanel"
                        },
                        new
                        {
                            Address = "localhost"
                        });
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantPartner", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id")
                        .HasColumnType("integer");

                    b.Property<string>("AffiliateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("affiliate_id")
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(50);

                    b.Property<string>("Campaign")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("campaign")
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(50);

                    b.Property<string>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("partner_id")
                        .HasColumnType("character varying(36)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(36);

                    b.HasKey("TenantId")
                        .HasName("tenants_partners_pkey");

                    b.ToTable("tenants_partners","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantVersion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultVersion")
                        .HasColumnName("default_version")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnName("version")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("Visible")
                        .HasColumnName("visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("tenants_version","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.TenantIpRestrictions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnName("ip")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Tenant")
                        .HasColumnName("tenant")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Tenant")
                        .HasName("tenant_tenants_iprestrictions");

                    b.ToTable("tenants_iprestrictions","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasMaxLength(38);

                    b.Property<int>("ActivationStatus")
                        .HasColumnName("activation_status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnName("bithdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Contacts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contacts")
                        .HasColumnType("character varying(1024)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreateOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_on")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Culture")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("culture")
                        .HasColumnType("character varying(20)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email")
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("LastModified")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Location")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("location")
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(255);

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notes")
                        .HasColumnType("character varying(512)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(512);

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone")
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(255);

                    b.Property<int>("PhoneActivation")
                        .HasColumnName("phone_activation")
                        .HasColumnType("integer");

                    b.Property<bool>("Removed")
                        .HasColumnName("removed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("boolean");

                    b.Property<string>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sid")
                        .HasColumnType("character varying(512)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(512);

                    b.Property<string>("SsoNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sso_name_id")
                        .HasColumnType("character varying(512)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(512);

                    b.Property<string>("SsoSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sso_session_id")
                        .HasColumnType("character varying(512)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(512);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Tenant")
                        .HasColumnName("tenant")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TerminatedDate")
                        .HasColumnName("terminateddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title")
                        .HasColumnType("character varying(64)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(64);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("WorkFromDate")
                        .HasColumnName("workfromdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasName("email");

                    b.HasIndex("LastModified")
                        .HasName("last_modified_core_user");

                    b.HasIndex("UserName", "Tenant")
                        .HasName("username");

                    b.ToTable("core_user","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserGroup", b =>
                {
                    b.Property<int>("Tenant")
                        .HasColumnName("tenant")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("uuid")
                        .HasMaxLength(38);

                    b.Property<Guid>("GroupId")
                        .HasColumnName("groupid")
                        .HasColumnType("uuid")
                        .HasMaxLength(38);

                    b.Property<int>("RefType")
                        .HasColumnName("ref_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Removed")
                        .HasColumnName("removed")
                        .HasColumnType("boolean");

                    b.HasKey("Tenant", "UserId", "GroupId", "RefType")
                        .HasName("core_usergroup_pkey");

                    b.HasIndex("LastModified")
                        .HasName("last_modified_core_usergroup");

                    b.HasIndex("UserId");

                    b.ToTable("core_usergroup","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserSecurity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("uuid")
                        .HasMaxLength(38);

                    b.Property<string>("PwdHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pwdhash")
                        .HasColumnType("character varying(512)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(512);

                    b.Property<string>("PwdHashSha512")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pwdhashsha512")
                        .HasColumnType("character varying(512)")
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(512);

                    b.Property<int>("Tenant")
                        .HasColumnName("tenant")
                        .HasColumnType("integer");

                    b.HasKey("UserId")
                        .HasName("core_usersecurity_pkey");

                    b.HasIndex("PwdHash")
                        .HasName("pwdhash");

                    b.HasIndex("Tenant")
                        .HasName("tenant_core_usersecurity");

                    b.ToTable("core_usersecurity","onlyoffice");
                });

            modelBuilder.Entity("ASC.Core.Common.EF.Model.DbTenantPartner", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.Model.DbTenant", "Tenant")
                        .WithOne("Partner")
                        .HasForeignKey("ASC.Core.Common.EF.Model.DbTenantPartner", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserGroup", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.User", null)
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASC.Core.Common.EF.UserSecurity", b =>
                {
                    b.HasOne("ASC.Core.Common.EF.User", null)
                        .WithOne("UserSecurity")
                        .HasForeignKey("ASC.Core.Common.EF.UserSecurity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
